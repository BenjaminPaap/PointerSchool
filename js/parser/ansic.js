/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ansic = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,30],$V1=[1,31],$V2=[1,29],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[1,34],$Vj=[1,35],$Vk=[1,33],$Vl=[5,7,10,30,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,105,106,111],$Vm=[1,39],$Vn=[1,45],$Vo=[7,10,12,14,22,30,77],$Vp=[12,22,61,63,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,105,106,111],$Vq=[1,51],$Vr=[1,50],$Vs=[7,10,12,14,22,30,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,105,106,111],$Vt=[7,10,12,14,22,30,61,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,105,106,111],$Vu=[7,10,12,14,22],$Vv=[10,12,14,22,61,63,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,105,106,111],$Vw=[7,102],$Vx=[22,77],$Vy=[2,84],$Vz=[1,60],$VA=[5,7,8,9,10,19,24,27,29,30,31,32,33,34,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,106,111,131,132,135,137,138,139,140,141,142,143],$VB=[7,8,9,10,19,24,27,29,30,31,32,33,34,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,106,111,131,132,135,137,138,139,140,141,142,143],$VC=[1,75],$VD=[1,106],$VE=[1,107],$VF=[1,108],$VG=[1,93],$VH=[1,94],$VI=[1,96],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[1,78],$VQ=[1,76],$VR=[1,77],$VS=[1,80],$VT=[1,81],$VU=[1,82],$VV=[1,83],$VW=[1,84],$VX=[1,85],$VY=[1,86],$VZ=[1,87],$V_=[1,122],$V$=[1,138],$V01=[1,143],$V11=[5,7,8,9,10,19,24,27,29,30,31,32,33,34,77,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,104,105,106,111,131,132,135,136,137,138,139,140,141,142,143],$V21=[7,8,9,10,19,24,27,29,30,31,32,33,34,77,102,104,131,132,135,137,138,139,140,141,142,143],$V31=[7,8,9,10,19,24,27,29,30,31,32,33,34,77,102,104,131,132,135,136,137,138,139,140,141,142,143],$V41=[2,2],$V51=[7,8,9,10,12,19,24,27,29,30,31,32,33,34,77,102,104,131,132,135,136,137,138,139,140,141,142,143],$V61=[1,153],$V71=[12,15,22,61,77],$V81=[12,15,22,61,77,104],$V91=[12,15,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,61,77,104],$Va1=[2,28],$Vb1=[12,15,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,61,63,64,65,66,67,68,69,70,71,72,73,77,104],$Vc1=[1,184],$Vd1=[12,15,22,58,60,61,77,104],$Ve1=[1,189],$Vf1=[10,12,14,15,17,18,19,20,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,61,63,64,65,66,67,68,69,70,71,72,73,77,104],$Vg1=[7,8,9,10,19,24,27,29,30,31,32,33,34],$Vh1=[12,15,22,56,58,60,61,77,104],$Vi1=[1,190],$Vj1=[12,15,22,54,56,58,60,61,77,104],$Vk1=[1,194],$Vl1=[12,15,22,52,54,56,58,60,61,77,104],$Vm1=[1,195],$Vn1=[12,15,22,29,52,54,56,58,60,61,77,104],$Vo1=[1,196],$Vp1=[1,197],$Vq1=[12,15,22,29,48,49,52,54,56,58,60,61,77,104],$Vr1=[1,198],$Vs1=[1,199],$Vt1=[1,200],$Vu1=[1,201],$Vv1=[12,15,22,29,43,44,45,46,48,49,52,54,56,58,60,61,77,104],$Vw1=[1,202],$Vx1=[1,203],$Vy1=[12,15,22,29,40,41,43,44,45,46,48,49,52,54,56,58,60,61,77,104],$Vz1=[1,204],$VA1=[1,205],$VB1=[12,15,22,29,31,32,40,41,43,44,45,46,48,49,52,54,56,58,60,61,77,104],$VC1=[1,206],$VD1=[1,207],$VE1=[1,208],$VF1=[12,22],$VG1=[1,218],$VH1=[1,219],$VI1=[89,90,91,92,93,94,95,96,97,98,104,105,106,111],$VJ1=[1,226],$VK1=[7,10,12,14,30,61],$VL1=[1,229],$VM1=[22,104],$VN1=[22,77,104],$VO1=[1,261],$VP1=[2,147],$VQ1=[1,282],$VR1=[1,281],$VS1=[1,284],$VT1=[10,12,14,22];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"translation_unit":4,"EOF":5,"primary_expression":6,"IDENTIFIER":7,"CONSTANT":8,"STRING_LITERAL":9,"(":10,"expression":11,")":12,"postfix_expression":13,"[":14,"]":15,"argument_expression_list":16,".":17,"PTR_OP":18,"INC_OP":19,"DEC_OP-":20,"assignment_expression":21,",":22,"unary_expression":23,"DEC_OP":24,"unary_operator":25,"cast_expression":26,"SIZEOF":27,"type_name":28,"&":29,"*":30,"+":31,"-":32,"~":33,"!":34,"multiplicative_expression":35,"/":36,"%":37,"additive_expression":38,"shift_expression":39,"LEFT_OP":40,"RIGHT_OP":41,"relational_expression":42,"<":43,">":44,"LE_OP":45,"GE_OP":46,"equality_expression":47,"EQ_OP":48,"NE_OP":49,"and_expression":50,"exclusive_or_expression":51,"^":52,"inclusive_or_expression":53,"|":54,"logical_and_expression":55,"AND_OP":56,"logical_or_expression":57,"OR_OP":58,"conditional_expression":59,"?":60,":":61,"assignment_operator":62,"=":63,"MUL_ASSIGN":64,"DIV_ASSIGN":65,"MOD_ASSIGN":66,"ADD_ASSIGN":67,"SUB_ASSIGN":68,"LEFT_ASSIGN":69,"RIGHT_ASSIGN":70,"AND_ASSIGN":71,"XOR_ASSIGN":72,"OR_ASSIGN":73,"constant_expression":74,"declaration":75,"declaration_specifiers":76,";":77,"init_declarator_list":78,"storage_class_specifier":79,"type_specifier":80,"init_declarator":81,"declarator":82,"initializer":83,"TYPEDEF":84,"EXTERN":85,"STATIC":86,"AUTO":87,"REGISTER":88,"TYPE_NAME":89,"VOID":90,"CHAR":91,"SHORT":92,"INT":93,"LONG":94,"FLOAT":95,"DOUBLE":96,"SIGNED":97,"UNSIGNED":98,"struct_or_union_specifier":99,"enum_specifier":100,"struct_or_union":101,"{":102,"struct_declaration_list":103,"}":104,"STRUCT":105,"UNION":106,"struct_declaration":107,"specifier_qualifier_list":108,"struct_declarator_list":109,"struct_declarator":110,"ENUM":111,"enumerator_list":112,"enumerator":113,"pointer":114,"direct_declarator":115,"parameter_type_list":116,"identifier_list":117,"parameter_list":118,"ELLIPSIS":119,"parameter_declaration":120,"abstract_declarator":121,"direct_abstract_declarator":122,"initializer_list":123,"statement":124,"labeled_statement":125,"compound_statement":126,"expression_statement":127,"selection_statement":128,"iteration_statement":129,"jump_statement":130,"CASE":131,"DEFAULT":132,"statement_list":133,"declaration_list":134,"IF":135,"ELSE":136,"SWITCH":137,"WHILE":138,"DO":139,"FOR":140,"CONTINUE":141,"BREAK":142,"RETURN":143,"external_declaration":144,"function_definition":145,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENTIFIER",8:"CONSTANT",9:"STRING_LITERAL",10:"(",12:")",14:"[",15:"]",17:".",18:"PTR_OP",19:"INC_OP",20:"DEC_OP-",22:",",24:"DEC_OP",27:"SIZEOF",29:"&",30:"*",31:"+",32:"-",33:"~",34:"!",36:"/",37:"%",40:"LEFT_OP",41:"RIGHT_OP",43:"<",44:">",45:"LE_OP",46:"GE_OP",48:"EQ_OP",49:"NE_OP",52:"^",54:"|",56:"AND_OP",58:"OR_OP",60:"?",61:":",63:"=",64:"MUL_ASSIGN",65:"DIV_ASSIGN",66:"MOD_ASSIGN",67:"ADD_ASSIGN",68:"SUB_ASSIGN",69:"LEFT_ASSIGN",70:"RIGHT_ASSIGN",71:"AND_ASSIGN",72:"XOR_ASSIGN",73:"OR_ASSIGN",77:";",84:"TYPEDEF",85:"EXTERN",86:"STATIC",87:"AUTO",88:"REGISTER",89:"TYPE_NAME",90:"VOID",91:"CHAR",92:"SHORT",93:"INT",94:"LONG",95:"FLOAT",96:"DOUBLE",97:"SIGNED",98:"UNSIGNED",102:"{",104:"}",105:"STRUCT",106:"UNION",111:"ENUM",119:"ELLIPSIS",131:"CASE",132:"DEFAULT",135:"IF",136:"ELSE",137:"SWITCH",138:"WHILE",139:"DO",140:"FOR",141:"CONTINUE",142:"BREAK",143:"RETURN"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,3],[13,1],[13,4],[13,3],[13,4],[13,3],[13,3],[13,2],[13,2],[16,1],[16,3],[23,1],[23,2],[23,2],[23,2],[23,2],[23,4],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[26,1],[26,4],[35,1],[35,3],[35,3],[35,3],[38,1],[38,3],[38,3],[39,1],[39,3],[39,3],[42,1],[42,3],[42,3],[42,3],[42,3],[47,1],[47,3],[47,3],[50,1],[50,3],[51,1],[51,3],[53,1],[53,3],[55,1],[55,3],[57,1],[57,3],[59,1],[59,5],[21,1],[21,3],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[11,1],[11,3],[74,1],[75,2],[75,3],[76,1],[76,2],[76,1],[76,2],[78,1],[78,3],[81,1],[81,3],[79,1],[79,1],[79,1],[79,1],[79,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[99,5],[99,4],[99,2],[101,1],[101,1],[103,1],[103,2],[107,3],[108,2],[108,1],[109,1],[109,3],[110,1],[110,2],[110,3],[100,4],[100,5],[100,2],[112,1],[112,3],[113,1],[113,3],[82,2],[82,1],[115,1],[115,3],[115,4],[115,3],[115,4],[115,4],[115,3],[114,1],[114,2],[116,1],[116,3],[118,1],[118,3],[120,2],[120,2],[120,1],[117,1],[117,3],[28,1],[28,2],[121,1],[121,1],[121,2],[122,3],[122,2],[122,3],[122,3],[122,4],[122,2],[122,3],[122,3],[122,4],[83,1],[83,3],[83,4],[123,1],[123,3],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[125,3],[125,4],[125,3],[126,2],[126,3],[126,3],[126,4],[134,1],[134,2],[133,1],[133,2],[127,1],[127,2],[128,5],[128,7],[128,5],[129,5],[129,7],[129,6],[129,7],[130,2],[130,2],[130,2],[130,3],[4,1],[4,2],[144,1],[144,1],[145,4],[145,3],[145,3],[145,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 /*typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);*/
        printDictionary();
        declarationsDictionary = {};
        return this.$; 
    
break;
case 2: case 3: case 6: case 10: case 14: case 16: case 22: case 28: case 30: case 34: case 37: case 40: case 45: case 48: case 50: case 52: case 54: case 56: case 58: case 60: case 73: case 78: case 80: case 82: case 84: case 91: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 106: case 107: case 108: case 112: case 113: case 115: case 116: case 126: case 127: case 147: case 148: case 159: case 162: case 164: case 165: case 166: case 167: case 168: case 169: case 179: case 194: case 196: case 197:
this.$ = [$$[$0]];
break;
case 4:
this.$ = ["type:STRING_LITERAL", $$[$0]];
break;
case 5: case 76: case 160: case 174: case 175: case 190: case 191: case 192:
this.$ = [$$[$0-1]];
break;
case 7: case 9: case 104:
this.$ = [$$[$0-3], $$[$0-1]];
break;
case 8: case 161:
this.$ = [$$[$0-2]];
break;
case 11: case 61: case 199: case 200:
this.$ = [$$[$0-2], $$[$0-1], $$[$0]];
break;
case 12: case 79: case 81: case 105: case 109: case 111: case 125: case 149: case 180: case 195: case 201:
this.$ = [$$[$0-1], $$[$0]];
break;
case 15: case 74: case 77: case 176: case 193:
this.$ = [$$[$0-2], $$[$0-1]];
break;
case 31:

        mul = Number($$[$0-2]);
        cast = Number($$[$0]);
        
        if(isNaN(mul) || isNaN(cast)){
            throw new TypeError("Arguments of multiplication must be numbers.");
        }
        
        this.$ = mul * cast;
    
break;
case 35:

        add = Number($$[$0-2]);
        mul = Number($$[$0]);
        
        if(isNaN(add) || isNaN(mul)){
            throw new TypeError("Arguments of addition must be numbers.");
        }
        
        this.$ = add + mul;
    
break;
case 36:

        add = Number($$[$0-2]);
        mul = Number($$[$0]);
        
        if(isNaN(add) || isNaN(mul)){
            throw new TypeError("Arguments of addition must be numbers.");
        }
        
        this.$ = add - mul;
    
break;
case 83: case 114: case 117: case 163: case 170: case 172:
this.$ = [$$[$0-2], $$[$0]];
break;
case 85:

        addDictionary($$[$0-2],0);
        console.log("Add to dictionary");
    
break;
case 92:
this.$ = [$$[$0]] ;
break;
case 103:
this.$ = ["type:struct_or_union_specifier", $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]];
break;
case 110:
this.$ =[$$[$0-2], $$[$0-1], $$[$0]];
break;
case 171:
this.$ = [$$[$0-3], $$[$0-2], $$[$0]];
break;
case 177:
this.$ =[$$[$0]];
break;
case 178:
this.$ =[$$[$0-1], $$[$0]];
break;
case 181:
this.$ = [";"];
break;
case 182:
this.$ = [$$[$0-1], ";"] ;
break;
case 198:
this.$ = [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]];
break;
}
},
table: [{3:1,4:2,7:$V0,10:$V1,30:$V2,75:5,76:6,79:8,80:9,82:7,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,111:$Vk,114:10,115:11,144:3,145:4},{1:[3]},{5:[1,36],7:$V0,10:$V1,30:$V2,75:5,76:6,79:8,80:9,82:7,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,111:$Vk,114:10,115:11,144:37,145:4},o($Vl,[2,194]),o($Vl,[2,196]),o($Vl,[2,197]),{7:$V0,10:$V1,30:$V2,77:$Vm,78:40,81:41,82:38,114:10,115:11},{75:44,76:46,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,102:$Vn,105:$Vi,106:$Vj,111:$Vk,126:43,134:42},o($Vo,[2,78],{79:8,80:9,99:27,100:28,101:32,76:47,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,105:$Vi,106:$Vj,111:$Vk}),o($Vo,[2,80],{79:8,80:9,99:27,100:28,101:32,76:48,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,105:$Vi,106:$Vj,111:$Vk}),{7:$V0,10:$V1,115:49},o($Vp,[2,126],{10:$Vq,14:$Vr}),o($Vs,[2,86]),o($Vs,[2,87]),o($Vs,[2,88]),o($Vs,[2,89]),o($Vs,[2,90]),o($Vt,[2,91]),o($Vt,[2,92]),o($Vt,[2,93]),o($Vt,[2,94]),o($Vt,[2,95]),o($Vt,[2,96]),o($Vt,[2,97]),o($Vt,[2,98]),o($Vt,[2,99]),o($Vt,[2,100]),o($Vt,[2,101]),o($Vt,[2,102]),o($Vu,[2,134],{114:52,30:$V2}),o($Vv,[2,127]),{7:$V0,10:$V1,30:$V2,82:53,114:10,115:11},{7:[1,54],102:[1,55]},{7:[1,57],102:[1,56]},o($Vw,[2,106]),o($Vw,[2,107]),{1:[2,1]},o($Vl,[2,195]),o($Vx,$Vy,{79:8,80:9,99:27,100:28,101:32,75:44,76:46,134:58,126:59,63:$Vz,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,102:$Vn,105:$Vi,106:$Vj,111:$Vk}),o($VA,[2,76]),{22:[1,62],77:[1,61]},o($Vx,[2,82]),{75:64,76:46,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,102:$Vn,105:$Vi,106:$Vj,111:$Vk,126:63},o($Vl,[2,201]),o($VB,[2,177]),{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,75:44,76:46,77:$VP,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,102:$Vn,104:[1,65],105:$Vi,106:$Vj,111:$Vk,124:68,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,133:66,134:67,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{7:$V0,10:$V1,30:$V2,77:$Vm,78:40,81:41,82:117,114:10,115:11},o($Vo,[2,79]),o($Vo,[2,81]),o($Vp,[2,125],{10:$Vq,14:$Vr}),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,15:[1,119],19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:120,74:118},{7:[1,127],12:[1,125],76:129,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,111:$Vk,116:123,117:124,118:126,120:128},o($Vu,[2,135]),{12:[1,130]},o($Vt,[2,105],{102:[1,131]}),{80:135,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,103:132,105:$Vi,106:$Vj,107:133,108:134,111:$Vk},{7:$V$,112:136,113:137},o($Vt,[2,120],{102:[1,139]}),{75:64,76:46,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,102:$Vn,105:$Vi,106:$Vj,111:$Vk,126:140},o($Vl,[2,199]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,21:142,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,83:141,102:$V01},o($VA,[2,77]),{7:$V0,10:$V1,30:$V2,81:144,82:117,114:10,115:11},o($Vl,[2,200]),o($VB,[2,178]),o($V11,[2,173]),{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,104:[1,145],124:146,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,75:64,76:46,77:$VP,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,102:$Vn,104:[1,147],105:$Vi,106:$Vj,111:$Vk,124:68,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,133:148,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},o($V21,[2,179]),o($V31,[2,164]),o($V31,[2,165]),o($V31,[2,166]),o($V31,[2,167]),o($V31,[2,168]),o($V31,[2,169]),o([10,14,17,18,19,20,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,63,64,65,66,67,68,69,70,71,72,73,77],$V41,{61:[1,149]}),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:120,74:150},{61:[1,151]},o($V51,[2,181]),{22:$V61,77:[1,152]},{10:[1,154]},{10:[1,155]},{10:[1,156]},{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:157,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{10:[1,158]},{77:[1,159]},{77:[1,160]},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:162,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:[1,161]},o($V71,[2,73]),o($V81,[2,60]),o($V91,$Va1,{62:163,63:[1,164],64:[1,165],65:[1,166],66:[1,167],67:[1,168],68:[1,169],69:[1,170],70:[1,171],71:[1,172],72:[1,173],73:[1,174]}),o($V81,[2,58],{58:[1,176],60:[1,175]}),o($Vb1,[2,16],{10:[1,178],14:[1,177],17:[1,179],18:[1,180],19:[1,181],20:[1,182]}),{6:98,7:$V_,8:$VD,9:$VE,10:$Vc1,13:92,19:$VG,23:183,24:$VH,25:95,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},{6:98,7:$V_,8:$VD,9:$VE,10:$Vc1,13:92,19:$VG,23:185,24:$VH,25:95,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:186,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},{6:98,7:$V_,8:$VD,9:$VE,10:[1,188],13:92,19:$VG,23:187,24:$VH,25:95,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},o($Vd1,[2,56],{56:$Ve1}),o($Vf1,[2,6]),o($Vg1,[2,22]),o($Vg1,[2,23]),o($Vg1,[2,24]),o($Vg1,[2,25]),o($Vg1,[2,26]),o($Vg1,[2,27]),o($Vh1,[2,54],{54:$Vi1}),o($Vf1,[2,3]),o($Vf1,[2,4]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:191,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,28:192,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,80:135,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,108:193,111:$Vk},o($Vj1,[2,52],{52:$Vk1}),o($Vl1,[2,50],{29:$Vm1}),o($Vn1,[2,48],{48:$Vo1,49:$Vp1}),o($Vq1,[2,45],{43:$Vr1,44:$Vs1,45:$Vt1,46:$Vu1}),o($Vv1,[2,40],{40:$Vw1,41:$Vx1}),o($Vy1,[2,37],{31:$Vz1,32:$VA1}),o($VB1,[2,34],{30:$VC1,36:$VD1,37:$VE1}),o($V91,[2,30]),o($Vx,$Vy,{63:$Vz}),{15:[1,209]},o($Vv,[2,130]),o([15,22,61,77,104],[2,75]),o($Vb1,$Va1),o($Vf1,$V41),{12:[1,210]},{12:[1,211],22:[1,212]},o($Vv,[2,133]),{12:[2,136],22:[1,213]},o($VF1,[2,143]),o($VF1,[2,138]),o($VF1,[2,142],{115:11,82:214,121:215,114:216,122:217,7:$V0,10:$VG1,14:$VH1,30:$V2}),o($Vv,[2,128]),{80:135,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,103:220,105:$Vi,106:$Vj,107:133,108:134,111:$Vk},{80:135,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,104:[1,221],105:$Vi,106:$Vj,107:222,108:134,111:$Vk},o($VI1,[2,108]),{7:$V0,10:$V1,30:$V2,61:$VJ1,82:225,109:223,110:224,114:10,115:11},o($VK1,[2,112],{99:27,100:28,101:32,80:135,108:227,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,105:$Vi,106:$Vj,111:$Vk}),{22:$VL1,104:[1,228]},o($VM1,[2,121]),o($VM1,[2,123],{63:[1,230]}),{7:$V$,112:231,113:137},o($Vl,[2,198]),o($Vx,[2,85]),o($VN1,[2,159]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,21:142,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,83:233,102:$V01,123:232},o($Vx,[2,83]),o($V11,[2,174]),o($V21,[2,180]),o($V11,[2,175]),{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,104:[1,234],124:146,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:235,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{61:[1,236]},{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:237,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},o($V51,[2,182]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,21:238,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:239,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:240,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:241,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{138:[1,242]},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,127:243},o($V31,[2,190]),o($V31,[2,191]),o($V31,[2,192]),{22:$V61,77:[1,244]},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,21:245,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},o($Vg1,[2,62]),o($Vg1,[2,63]),o($Vg1,[2,64]),o($Vg1,[2,65]),o($Vg1,[2,66]),o($Vg1,[2,67]),o($Vg1,[2,68]),o($Vg1,[2,69]),o($Vg1,[2,70]),o($Vg1,[2,71]),o($Vg1,[2,72]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:246,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:247},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:248,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,12:[1,249],13:92,16:250,19:$VG,21:251,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{7:[1,252]},{7:[1,253]},o($Vf1,[2,12]),o($Vf1,[2,13]),o($Vb1,[2,17]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:191,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},o($Vb1,[2,18]),o($Vb1,[2,19]),o($Vb1,[2,20]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:191,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,28:254,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,80:135,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,108:193,111:$Vk},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:255},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:256},{12:[1,257],22:$V61},{12:[1,258]},{10:$VO1,12:[2,145],14:$VH1,30:$V2,114:260,121:259,122:217},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:262},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:263},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:264},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:265},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:266},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:267},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:268},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:269},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:270},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:271},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:272},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:273},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:274,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:275,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:276,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},o($Vv,[2,129]),o($Vv,[2,131]),o($Vv,[2,132]),{7:[1,277]},{76:129,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,111:$Vk,119:[1,278],120:279},o($VF1,[2,140]),o($VF1,[2,141]),o($VF1,$VP1,{115:49,122:280,7:$V0,10:$VG1,14:$VH1}),o($VF1,[2,148],{10:$VQ1,14:$VR1}),{7:$V0,10:$VG1,12:$VS1,14:$VH1,30:$V2,76:129,79:8,80:9,82:53,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,111:$Vk,114:216,115:11,116:285,118:126,120:128,121:283,122:217},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,15:[1,286],19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:120,74:287},{80:135,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,104:[1,288],105:$Vi,106:$Vj,107:222,108:134,111:$Vk},o($Vt,[2,104]),o($VI1,[2,109]),{22:[1,290],77:[1,289]},o($Vx,[2,113]),o($Vx,[2,115],{61:[1,291]}),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:120,74:292},o($VK1,[2,111]),o($Vt,[2,118]),{7:$V$,113:293},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:120,74:294},{22:$VL1,104:[1,295]},{22:[1,297],104:[1,296]},o($VM1,[2,162]),o($V11,[2,176]),o($V31,[2,170]),{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:298,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},o($V31,[2,172]),o($V71,[2,74]),{12:[1,299],22:$V61},{12:[1,300],22:$V61},{12:[1,301],22:$V61},{10:[1,302]},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,127:303},o($V31,[2,193]),o($V81,[2,61]),{22:$V61,61:[1,304]},o($Vd1,[2,57],{56:$Ve1}),{15:[1,305],22:$V61},o($Vf1,[2,8]),{12:[1,306],22:[1,307]},o($VF1,[2,14]),o($Vf1,[2,10]),o($Vf1,[2,11]),{12:[1,308]},o($Vh1,[2,55],{54:$Vi1}),o($Vj1,[2,53],{52:$Vk1}),o($Vf1,[2,5]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:309,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO},{12:[2,146]},{10:$VO1,12:$VP1,14:$VH1,122:280},{10:$VO1,12:$VS1,14:$VH1,30:$V2,76:129,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,111:$Vk,114:260,116:285,118:126,120:128,121:283,122:217},o($Vl1,[2,51],{29:$Vm1}),o($Vn1,[2,49],{48:$Vo1,49:$Vp1}),o($Vq1,[2,46],{43:$Vr1,44:$Vs1,45:$Vt1,46:$Vu1}),o($Vq1,[2,47],{43:$Vr1,44:$Vs1,45:$Vt1,46:$Vu1}),o($Vv1,[2,41],{40:$Vw1,41:$Vx1}),o($Vv1,[2,42],{40:$Vw1,41:$Vx1}),o($Vv1,[2,43],{40:$Vw1,41:$Vx1}),o($Vv1,[2,44],{40:$Vw1,41:$Vx1}),o($Vy1,[2,38],{31:$Vz1,32:$VA1}),o($Vy1,[2,39],{31:$Vz1,32:$VA1}),o($VB1,[2,35],{30:$VC1,36:$VD1,37:$VE1}),o($VB1,[2,36],{30:$VC1,36:$VD1,37:$VE1}),o($V91,[2,31]),o($V91,[2,32]),o($V91,[2,33]),o($VF1,[2,144]),{12:[2,137]},o($VF1,[2,139]),o($VF1,[2,149],{10:$VQ1,14:$VR1}),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,15:[1,310],19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:120,74:311},{12:[1,312],76:129,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg,98:$Vh,99:27,100:28,101:32,105:$Vi,106:$Vj,111:$Vk,116:313,118:126,120:128},{12:[1,314]},o($VT1,[2,155]),{12:[1,315]},o($VT1,[2,151]),{15:[1,316]},o($Vt,[2,103]),o($VI1,[2,110]),{7:$V0,10:$V1,30:$V2,61:$VJ1,82:225,110:317,114:10,115:11},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:120,74:318},o($Vx,[2,116]),o($VM1,[2,122]),o($VM1,[2,124]),o($Vt,[2,119]),o($VN1,[2,160]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,21:142,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,83:320,102:$V01,104:[1,319]},o($V31,[2,171]),{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:321,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:322,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:323,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:324,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,11:326,12:[1,325],13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,23:121,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:327},o($Vf1,[2,7]),o($Vf1,[2,9]),{6:98,7:$V_,8:$VD,9:$VE,10:$VF,13:92,19:$VG,21:328,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89},o($Vb1,[2,21]),o($Vb1,[2,29]),o($VT1,[2,153]),{15:[1,329]},o($VT1,[2,157]),{12:[1,330]},o($VT1,[2,150]),o($VT1,[2,156]),o($VT1,[2,152]),o($Vx,[2,114]),o($Vx,[2,117]),o($VN1,[2,161]),o($VM1,[2,163]),o($V21,[2,183],{136:[1,331]}),o($V31,[2,185]),o($V31,[2,186]),{12:[1,332],22:$V61},{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:333,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{12:[1,334],22:$V61},o($V81,[2,59]),o($VF1,[2,15]),o($VT1,[2,154]),o($VT1,[2,158]),{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:335,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},{77:[1,336]},o($V31,[2,188]),{6:98,7:$VC,8:$VD,9:$VE,10:$VF,11:79,13:92,19:$VG,21:88,23:90,24:$VH,25:95,26:116,27:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:115,38:114,39:113,42:112,47:111,50:110,51:109,53:105,55:97,57:91,59:89,77:$VP,102:$Vn,124:337,125:69,126:70,127:71,128:72,129:73,130:74,131:$VQ,132:$VR,135:$VS,137:$VT,138:$VU,139:$VV,140:$VW,141:$VX,142:$VY,143:$VZ},o($V31,[2,184]),o($V31,[2,187]),o($V31,[2,189])],
defaultActions: {36:[2,1],259:[2,146],278:[2,137]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //var dictionary;
    console.log("Dictionary is declared");
 
declarationsDictionary = {};

addDictionary = function(key, value){
    declarationsDictionary[key] = value;
}

printDictionary = function(){
    console.log("Print dictionary.");
    for(key in declarationsDictionary){
        console.log("Key: " + key + " Value: " + declarationsDictionary.key);
    }
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */                                 
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 8
break;
case 4:return 70
break;
case 5:return 69
break;
case 6:return 67
break;
case 7:return 68
break;
case 8:return 64
break;
case 9:return 65
break;
case 10:return 66
break;
case 11:return 71
break;
case 12:return 72
break;
case 13:return 73
break;
case 14:return 41
break;
case 15:return 40
break;
case 16:return 19
break;
case 17:return 24
break;
case 18:return 18
break;
case 19:return 56
break;
case 20:return 58
break;
case 21:return 45
break;
case 22:return 46
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 77
break;
case 26:return 102
break;
case 27:return 104
break;
case 28:return 22
break;
case 29:return 61
break;
case 30:return 63
break;
case 31:return 10
break;
case 32:return 12
break;
case 33:return 14
break;
case 34:return 15
break;
case 35:return 17
break;
case 36:return 29
break;
case 37:return 34
break;
case 38:return 33
break;
case 39:return 32
break;
case 40:return 31
break;
case 41:return 30
break;
case 42:return 36
break;
case 43:return 37
break;
case 44:return 43
break;
case 45:return 44
break;
case 46:return 52
break;
case 47:return 54
break;
case 48:return 60
break;
case 49:return 142
break;
case 50:return 131
break;
case 51:return 91
break;
case 52:return 141
break;
case 53:return 132
break;
case 54:return 139
break;
case 55:return 96
break;
case 56:return 136
break;
case 57:return 95
break;
case 58:return 140
break;
case 59:return 135
break;
case 60:return 93
break;
case 61:return 94
break;
case 62:return 143
break;
case 63:return 92
break;
case 64:return 97
break;
case 65:return 27
break;
case 66:return 105
break;
case 67:return 137
break;
case 68:return 84
break;
case 69:return 106
break;
case 70:return 98
break;
case 71:return 90
break;
case 72:return 138
break;
case 73:return 7 
break;
case 74:return 9
break;
case 75:return 5
break;
case 76:return 'INVALID'
break;
}
},
rules: [/^(?:[\t\v\n\f\s]+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:"[^"]+")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ansic;
exports.Parser = ansic.Parser;
exports.parse = function () { return ansic.parse.apply(ansic, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}