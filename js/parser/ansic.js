/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ansic = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,27],$V2=[1,25],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,30],$Vf=[1,31],$Vg=[1,29],$Vh=[5,7,10,30,84,85,86,87,88,89,90,91,92,93,94,101,102,107],$Vi=[1,35],$Vj=[1,41],$Vk=[7,10,12,14,22,30,77],$Vl=[12,22,61,63,77,84,85,86,87,88,89,90,91,92,93,94,98,101,102,107],$Vm=[1,47],$Vn=[1,46],$Vo=[7,10,12,14,22,30,61,77,84,85,86,87,88,89,90,91,92,93,94,101,102,107],$Vp=[7,10,12,14,22],$Vq=[10,12,14,22,61,63,77,84,85,86,87,88,89,90,91,92,93,94,98,101,102,107],$Vr=[7,98],$Vs=[22,77],$Vt=[2,84],$Vu=[1,56],$Vv=[5,7,8,9,10,19,24,27,29,30,31,32,33,34,77,84,85,86,87,88,89,90,91,92,93,94,98,100,101,102,107,127,128,131,133,134,135,136,137,138,139],$Vw=[7,8,9,10,19,24,27,29,30,31,32,33,34,77,84,85,86,87,88,89,90,91,92,93,94,98,100,101,102,107,127,128,131,133,134,135,136,137,138,139],$Vx=[1,71],$Vy=[1,102],$Vz=[1,103],$VA=[1,104],$VB=[1,89],$VC=[1,90],$VD=[1,92],$VE=[1,95],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,74],$VL=[1,72],$VM=[1,73],$VN=[1,76],$VO=[1,77],$VP=[1,78],$VQ=[1,79],$VR=[1,80],$VS=[1,81],$VT=[1,82],$VU=[1,83],$VV=[1,118],$VW=[1,134],$VX=[1,139],$VY=[5,7,8,9,10,19,24,27,29,30,31,32,33,34,77,84,85,86,87,88,89,90,91,92,93,94,98,100,101,102,107,127,128,131,132,133,134,135,136,137,138,139],$VZ=[7,8,9,10,19,24,27,29,30,31,32,33,34,77,98,100,127,128,131,133,134,135,136,137,138,139],$V_=[7,8,9,10,19,24,27,29,30,31,32,33,34,77,98,100,127,128,131,132,133,134,135,136,137,138,139],$V$=[2,2],$V01=[7,8,9,10,12,19,24,27,29,30,31,32,33,34,77,98,100,127,128,131,132,133,134,135,136,137,138,139],$V11=[1,149],$V21=[12,15,22,61,77],$V31=[12,15,22,61,77,100],$V41=[12,15,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,61,77,100],$V51=[2,28],$V61=[12,15,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,61,63,64,65,66,67,68,69,70,71,72,73,77,100],$V71=[1,180],$V81=[12,15,22,58,60,61,77,100],$V91=[1,185],$Va1=[10,12,14,15,17,18,19,20,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,61,63,64,65,66,67,68,69,70,71,72,73,77,100],$Vb1=[7,8,9,10,19,24,27,29,30,31,32,33,34],$Vc1=[12,15,22,56,58,60,61,77,100],$Vd1=[1,186],$Ve1=[12,15,22,54,56,58,60,61,77,100],$Vf1=[1,190],$Vg1=[12,15,22,52,54,56,58,60,61,77,100],$Vh1=[1,191],$Vi1=[12,15,22,29,52,54,56,58,60,61,77,100],$Vj1=[1,192],$Vk1=[1,193],$Vl1=[12,15,22,29,48,49,52,54,56,58,60,61,77,100],$Vm1=[1,194],$Vn1=[1,195],$Vo1=[1,196],$Vp1=[1,197],$Vq1=[12,15,22,29,43,44,45,46,48,49,52,54,56,58,60,61,77,100],$Vr1=[1,198],$Vs1=[1,199],$Vt1=[12,15,22,29,40,41,43,44,45,46,48,49,52,54,56,58,60,61,77,100],$Vu1=[1,200],$Vv1=[1,201],$Vw1=[12,15,22,29,31,32,40,41,43,44,45,46,48,49,52,54,56,58,60,61,77,100],$Vx1=[1,202],$Vy1=[1,203],$Vz1=[1,204],$VA1=[12,22],$VB1=[1,214],$VC1=[1,215],$VD1=[85,86,87,88,89,90,91,92,93,94,100,101,102,107],$VE1=[1,222],$VF1=[7,10,12,14,30,61],$VG1=[1,225],$VH1=[22,100],$VI1=[22,77,100],$VJ1=[1,257],$VK1=[2,143],$VL1=[1,278],$VM1=[1,277],$VN1=[1,280],$VO1=[10,12,14,22];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"translation_unit":4,"EOF":5,"primary_expression":6,"IDENTIFIER":7,"CONSTANT":8,"STRING_LITERAL":9,"(":10,"expression":11,")":12,"postfix_expression":13,"[":14,"]":15,"argument_expression_list":16,".":17,"PTR_OP":18,"INC_OP":19,"DEC_OP-":20,"assignment_expression":21,",":22,"unary_expression":23,"DEC_OP":24,"unary_operator":25,"cast_expression":26,"SIZEOF":27,"type_name":28,"&":29,"*":30,"+":31,"-":32,"~":33,"!":34,"multiplicative_expression":35,"/":36,"%":37,"additive_expression":38,"shift_expression":39,"LEFT_OP":40,"RIGHT_OP":41,"relational_expression":42,"<":43,">":44,"LE_OP":45,"GE_OP":46,"equality_expression":47,"EQ_OP":48,"NE_OP":49,"and_expression":50,"exclusive_or_expression":51,"^":52,"inclusive_or_expression":53,"|":54,"logical_and_expression":55,"AND_OP":56,"logical_or_expression":57,"OR_OP":58,"conditional_expression":59,"?":60,":":61,"assignment_operator":62,"=":63,"MUL_ASSIGN":64,"DIV_ASSIGN":65,"MOD_ASSIGN":66,"ADD_ASSIGN":67,"SUB_ASSIGN":68,"LEFT_ASSIGN":69,"RIGHT_ASSIGN":70,"AND_ASSIGN":71,"XOR_ASSIGN":72,"OR_ASSIGN":73,"constant_expression":74,"declaration":75,"declaration_specifiers":76,";":77,"init_declarator_list":78,"storage_class_specifier":79,"type_specifier":80,"init_declarator":81,"declarator":82,"initializer":83,"TYPEDEF":84,"TYPE_NAME":85,"VOID":86,"CHAR":87,"SHORT":88,"INT":89,"LONG":90,"FLOAT":91,"DOUBLE":92,"SIGNED":93,"UNSIGNED":94,"struct_or_union_specifier":95,"enum_specifier":96,"struct_or_union":97,"{":98,"struct_declaration_list":99,"}":100,"STRUCT":101,"UNION":102,"struct_declaration":103,"specifier_qualifier_list":104,"struct_declarator_list":105,"struct_declarator":106,"ENUM":107,"enumerator_list":108,"enumerator":109,"pointer":110,"direct_declarator":111,"parameter_type_list":112,"identifier_list":113,"parameter_list":114,"ELLIPSIS":115,"parameter_declaration":116,"abstract_declarator":117,"direct_abstract_declarator":118,"initializer_list":119,"statement":120,"labeled_statement":121,"compound_statement":122,"expression_statement":123,"selection_statement":124,"iteration_statement":125,"jump_statement":126,"CASE":127,"DEFAULT":128,"statement_list":129,"declaration_list":130,"IF":131,"ELSE":132,"SWITCH":133,"WHILE":134,"DO":135,"FOR":136,"CONTINUE":137,"BREAK":138,"RETURN":139,"external_declaration":140,"function_definition":141,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENTIFIER",8:"CONSTANT",9:"STRING_LITERAL",10:"(",12:")",14:"[",15:"]",17:".",18:"PTR_OP",19:"INC_OP",20:"DEC_OP-",22:",",24:"DEC_OP",27:"SIZEOF",29:"&",30:"*",31:"+",32:"-",33:"~",34:"!",36:"/",37:"%",40:"LEFT_OP",41:"RIGHT_OP",43:"<",44:">",45:"LE_OP",46:"GE_OP",48:"EQ_OP",49:"NE_OP",52:"^",54:"|",56:"AND_OP",58:"OR_OP",60:"?",61:":",63:"=",64:"MUL_ASSIGN",65:"DIV_ASSIGN",66:"MOD_ASSIGN",67:"ADD_ASSIGN",68:"SUB_ASSIGN",69:"LEFT_ASSIGN",70:"RIGHT_ASSIGN",71:"AND_ASSIGN",72:"XOR_ASSIGN",73:"OR_ASSIGN",77:";",84:"TYPEDEF",85:"TYPE_NAME",86:"VOID",87:"CHAR",88:"SHORT",89:"INT",90:"LONG",91:"FLOAT",92:"DOUBLE",93:"SIGNED",94:"UNSIGNED",98:"{",100:"}",101:"STRUCT",102:"UNION",107:"ENUM",115:"ELLIPSIS",127:"CASE",128:"DEFAULT",131:"IF",132:"ELSE",133:"SWITCH",134:"WHILE",135:"DO",136:"FOR",137:"CONTINUE",138:"BREAK",139:"RETURN"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,3],[13,1],[13,4],[13,3],[13,4],[13,3],[13,3],[13,2],[13,2],[16,1],[16,3],[23,1],[23,2],[23,2],[23,2],[23,2],[23,4],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[26,1],[26,4],[35,1],[35,3],[35,3],[35,3],[38,1],[38,3],[38,3],[39,1],[39,3],[39,3],[42,1],[42,3],[42,3],[42,3],[42,3],[47,1],[47,3],[47,3],[50,1],[50,3],[51,1],[51,3],[53,1],[53,3],[55,1],[55,3],[57,1],[57,3],[59,1],[59,5],[21,1],[21,3],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[11,1],[11,3],[74,1],[75,2],[75,3],[76,1],[76,2],[76,1],[76,2],[78,1],[78,3],[81,1],[81,3],[79,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[95,5],[95,4],[95,2],[97,1],[97,1],[99,1],[99,2],[103,3],[104,2],[104,1],[105,1],[105,3],[106,1],[106,2],[106,3],[96,4],[96,5],[96,2],[108,1],[108,3],[109,1],[109,3],[82,2],[82,1],[111,1],[111,3],[111,4],[111,3],[111,4],[111,4],[111,3],[110,1],[110,2],[112,1],[112,3],[114,1],[114,3],[116,2],[116,2],[116,1],[113,1],[113,3],[28,1],[28,2],[117,1],[117,1],[117,2],[118,3],[118,2],[118,3],[118,3],[118,4],[118,2],[118,3],[118,3],[118,4],[83,1],[83,3],[83,4],[119,1],[119,3],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[121,3],[121,4],[121,3],[122,2],[122,3],[122,3],[122,4],[130,1],[130,2],[129,1],[129,2],[123,1],[123,2],[124,5],[124,7],[124,5],[125,5],[125,7],[125,6],[125,7],[126,2],[126,2],[126,2],[126,3],[4,1],[4,2],[140,1],[140,1],[141,4],[141,3],[141,3],[141,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 /*typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);*/
        printDictionary();
        declarationsDictionary = {};
        return this.$; 
    
break;
case 2: case 3: case 6: case 10: case 14: case 16: case 22: case 28: case 30: case 34: case 37: case 40: case 45: case 48: case 50: case 52: case 54: case 56: case 58: case 60: case 73: case 75: case 78: case 80: case 82: case 84: case 87: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 102: case 103: case 104: case 108: case 109: case 111: case 112: case 122: case 123: case 143: case 144: case 155: case 158: case 160: case 161: case 162: case 163: case 164: case 165: case 175: case 177: case 190: case 192: case 193:
this.$ = [$$[$0]];
break;
case 4:
this.$ = ["type:STRING_LITERAL", $$[$0]];
break;
case 5: case 76: case 156: case 170: case 171: case 186: case 187: case 188:
this.$ = [$$[$0-1]];
break;
case 7: case 9: case 100:
this.$ = [$$[$0-3], $$[$0-1]];
break;
case 8: case 157:
this.$ = [$$[$0-2]];
break;
case 11: case 61: case 195: case 196:
this.$ = [$$[$0-2], $$[$0-1], $$[$0]];
break;
case 12: case 79: case 81: case 101: case 105: case 107: case 121: case 145: case 176: case 191: case 197:
this.$ = [$$[$0-1], $$[$0]];
break;
case 15: case 74: case 77: case 172: case 189:
this.$ = [$$[$0-2], $$[$0-1]];
break;
case 31:

        mul = Number($$[$0-2]);
        cast = Number($$[$0]);
        
        if(isNaN(mul) || isNaN(cast)){
            throw new TypeError("Arguments of multiplication must be numbers.");
        }
        
        this.$ = mul * cast;
    
break;
case 32:

        mul = Number($$[$0-2]);
        cast = Number($$[$0]);
        
        if(isNaN(mul) || isNaN(cast)){
            throw new TypeError("Arguments of multiplication must be numbers.");
        }
        
        this.$ = ~~(mul / cast);
    
break;
case 33:

        mul = Number($$[$0-2]);
        cast = Number($$[$0]);
        
        if(isNaN(mul) || isNaN(cast)){
            throw new TypeError("Arguments of multiplication must be numbers.");
        }
        
        this.$ = mul % cast;
    
break;
case 35:

        add = Number($$[$0-2]);
        mul = Number($$[$0]);
        
        if(isNaN(add) || isNaN(mul)){
            throw new TypeError("Arguments of addition must be numbers.");
        }
        
        this.$ = add + mul;
    
break;
case 36:

        add = Number($$[$0-2]);
        mul = Number($$[$0]);
        
        if(isNaN(add) || isNaN(mul)){
            throw new TypeError("Arguments of addition must be numbers.");
        }
        
        this.$ = add - mul;
    
break;
case 83: case 110: case 113: case 159: case 166: case 168:
this.$ = [$$[$0-2], $$[$0]];
break;
case 85:

        addDictionary($$[$0-2], $$[$0]);
        console.log("Add to dictionary");
    
break;
case 88:
this.$ = [$$[$0]] ;
break;
case 99:
this.$ = ["type:struct_or_union_specifier", $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]];
break;
case 106:
this.$ =[$$[$0-2], $$[$0-1], $$[$0]];
break;
case 167:
this.$ = [$$[$0-3], $$[$0-2], $$[$0]];
break;
case 173:
this.$ =[$$[$0]];
break;
case 174:
this.$ =[$$[$0-1], $$[$0]];
break;
case 178:
this.$ = [$$[$0-1], ";"] ;
break;
case 194:
this.$ = [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]];
break;
}
},
table: [{3:1,4:2,7:$V0,10:$V1,30:$V2,75:5,76:6,79:8,80:9,82:7,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,107:$Vg,110:10,111:11,140:3,141:4},{1:[3]},{5:[1,32],7:$V0,10:$V1,30:$V2,75:5,76:6,79:8,80:9,82:7,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,107:$Vg,110:10,111:11,140:33,141:4},o($Vh,[2,190]),o($Vh,[2,192]),o($Vh,[2,193]),{7:$V0,10:$V1,30:$V2,77:$Vi,78:36,81:37,82:34,110:10,111:11},{75:40,76:42,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,98:$Vj,101:$Ve,102:$Vf,107:$Vg,122:39,130:38},o($Vk,[2,78],{79:8,80:9,95:23,96:24,97:28,76:43,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,101:$Ve,102:$Vf,107:$Vg}),o($Vk,[2,80],{79:8,80:9,95:23,96:24,97:28,76:44,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,101:$Ve,102:$Vf,107:$Vg}),{7:$V0,10:$V1,111:45},o($Vl,[2,122],{10:$Vm,14:$Vn}),o([7,10,12,14,22,30,77,84,85,86,87,88,89,90,91,92,93,94,101,102,107],[2,86]),o($Vo,[2,87]),o($Vo,[2,88]),o($Vo,[2,89]),o($Vo,[2,90]),o($Vo,[2,91]),o($Vo,[2,92]),o($Vo,[2,93]),o($Vo,[2,94]),o($Vo,[2,95]),o($Vo,[2,96]),o($Vo,[2,97]),o($Vo,[2,98]),o($Vp,[2,130],{110:48,30:$V2}),o($Vq,[2,123]),{7:$V0,10:$V1,30:$V2,82:49,110:10,111:11},{7:[1,50],98:[1,51]},{7:[1,53],98:[1,52]},o($Vr,[2,102]),o($Vr,[2,103]),{1:[2,1]},o($Vh,[2,191]),o($Vs,$Vt,{79:8,80:9,95:23,96:24,97:28,75:40,76:42,130:54,122:55,63:$Vu,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,98:$Vj,101:$Ve,102:$Vf,107:$Vg}),o($Vv,[2,76]),{22:[1,58],77:[1,57]},o($Vs,[2,82]),{75:60,76:42,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,98:$Vj,101:$Ve,102:$Vf,107:$Vg,122:59},o($Vh,[2,197]),o($Vw,[2,173]),{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,75:40,76:42,77:$VK,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,98:$Vj,100:[1,61],101:$Ve,102:$Vf,107:$Vg,120:64,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,129:62,130:63,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{7:$V0,10:$V1,30:$V2,77:$Vi,78:36,81:37,82:113,110:10,111:11},o($Vk,[2,79]),o($Vk,[2,81]),o($Vl,[2,121],{10:$Vm,14:$Vn}),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,15:[1,115],19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:116,74:114},{7:[1,123],12:[1,121],76:125,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,107:$Vg,112:119,113:120,114:122,116:124},o($Vp,[2,131]),{12:[1,126]},o($Vo,[2,101],{98:[1,127]}),{80:131,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,99:128,101:$Ve,102:$Vf,103:129,104:130,107:$Vg},{7:$VW,108:132,109:133},o($Vo,[2,116],{98:[1,135]}),{75:60,76:42,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,98:$Vj,101:$Ve,102:$Vf,107:$Vg,122:136},o($Vh,[2,195]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,21:138,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,83:137,98:$VX},o($Vv,[2,77]),{7:$V0,10:$V1,30:$V2,81:140,82:113,110:10,111:11},o($Vh,[2,196]),o($Vw,[2,174]),o($VY,[2,169]),{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,100:[1,141],120:142,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,75:60,76:42,77:$VK,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,98:$Vj,100:[1,143],101:$Ve,102:$Vf,107:$Vg,120:64,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,129:144,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},o($VZ,[2,175]),o($V_,[2,160]),o($V_,[2,161]),o($V_,[2,162]),o($V_,[2,163]),o($V_,[2,164]),o($V_,[2,165]),o([10,14,17,18,19,20,22,29,30,31,32,36,37,40,41,43,44,45,46,48,49,52,54,56,58,60,63,64,65,66,67,68,69,70,71,72,73,77],$V$,{61:[1,145]}),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:116,74:146},{61:[1,147]},o($V01,[2,177]),{22:$V11,77:[1,148]},{10:[1,150]},{10:[1,151]},{10:[1,152]},{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:153,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{10:[1,154]},{77:[1,155]},{77:[1,156]},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:158,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:[1,157]},o($V21,[2,73]),o($V31,[2,60]),o($V41,$V51,{62:159,63:[1,160],64:[1,161],65:[1,162],66:[1,163],67:[1,164],68:[1,165],69:[1,166],70:[1,167],71:[1,168],72:[1,169],73:[1,170]}),o($V31,[2,58],{58:[1,172],60:[1,171]}),o($V61,[2,16],{10:[1,174],14:[1,173],17:[1,175],18:[1,176],19:[1,177],20:[1,178]}),{6:94,7:$VV,8:$Vy,9:$Vz,10:$V71,13:88,19:$VB,23:179,24:$VC,25:91,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},{6:94,7:$VV,8:$Vy,9:$Vz,10:$V71,13:88,19:$VB,23:181,24:$VC,25:91,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:182,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},{6:94,7:$VV,8:$Vy,9:$Vz,10:[1,184],13:88,19:$VB,23:183,24:$VC,25:91,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},o($V81,[2,56],{56:$V91}),o($Va1,[2,6]),o($Vb1,[2,22]),o($Vb1,[2,23]),o($Vb1,[2,24]),o($Vb1,[2,25]),o($Vb1,[2,26]),o($Vb1,[2,27]),o($Vc1,[2,54],{54:$Vd1}),o($Va1,[2,3]),o($Va1,[2,4]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:187,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,28:188,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,80:131,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,104:189,107:$Vg},o($Ve1,[2,52],{52:$Vf1}),o($Vg1,[2,50],{29:$Vh1}),o($Vi1,[2,48],{48:$Vj1,49:$Vk1}),o($Vl1,[2,45],{43:$Vm1,44:$Vn1,45:$Vo1,46:$Vp1}),o($Vq1,[2,40],{40:$Vr1,41:$Vs1}),o($Vt1,[2,37],{31:$Vu1,32:$Vv1}),o($Vw1,[2,34],{30:$Vx1,36:$Vy1,37:$Vz1}),o($V41,[2,30]),o($Vs,$Vt,{63:$Vu}),{15:[1,205]},o($Vq,[2,126]),o([15,22,61,77,100],[2,75]),o($V61,$V51),o($Va1,$V$),{12:[1,206]},{12:[1,207],22:[1,208]},o($Vq,[2,129]),{12:[2,132],22:[1,209]},o($VA1,[2,139]),o($VA1,[2,134]),o($VA1,[2,138],{111:11,82:210,117:211,110:212,118:213,7:$V0,10:$VB1,14:$VC1,30:$V2}),o($Vq,[2,124]),{80:131,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,99:216,101:$Ve,102:$Vf,103:129,104:130,107:$Vg},{80:131,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,100:[1,217],101:$Ve,102:$Vf,103:218,104:130,107:$Vg},o($VD1,[2,104]),{7:$V0,10:$V1,30:$V2,61:$VE1,82:221,105:219,106:220,110:10,111:11},o($VF1,[2,108],{95:23,96:24,97:28,80:131,104:223,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,101:$Ve,102:$Vf,107:$Vg}),{22:$VG1,100:[1,224]},o($VH1,[2,117]),o($VH1,[2,119],{63:[1,226]}),{7:$VW,108:227,109:133},o($Vh,[2,194]),o($Vs,[2,85]),o($VI1,[2,155]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,21:138,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,83:229,98:$VX,119:228},o($Vs,[2,83]),o($VY,[2,170]),o($VZ,[2,176]),o($VY,[2,171]),{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,100:[1,230],120:142,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:231,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{61:[1,232]},{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:233,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},o($V01,[2,178]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,21:234,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:235,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:236,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:237,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{134:[1,238]},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,123:239},o($V_,[2,186]),o($V_,[2,187]),o($V_,[2,188]),{22:$V11,77:[1,240]},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,21:241,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},o($Vb1,[2,62]),o($Vb1,[2,63]),o($Vb1,[2,64]),o($Vb1,[2,65]),o($Vb1,[2,66]),o($Vb1,[2,67]),o($Vb1,[2,68]),o($Vb1,[2,69]),o($Vb1,[2,70]),o($Vb1,[2,71]),o($Vb1,[2,72]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:242,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:243},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:244,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,12:[1,245],13:88,16:246,19:$VB,21:247,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{7:[1,248]},{7:[1,249]},o($Va1,[2,12]),o($Va1,[2,13]),o($V61,[2,17]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:187,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},o($V61,[2,18]),o($V61,[2,19]),o($V61,[2,20]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:187,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,28:250,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,80:131,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,104:189,107:$Vg},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:251},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:252},{12:[1,253],22:$V11},{12:[1,254]},{10:$VJ1,12:[2,141],14:$VC1,30:$V2,110:256,117:255,118:213},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:258},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:259},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:260},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:261},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:262},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:263},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:264},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:265},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:266},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:267},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:268},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:269},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:270,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:271,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:272,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},o($Vq,[2,125]),o($Vq,[2,127]),o($Vq,[2,128]),{7:[1,273]},{76:125,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,107:$Vg,115:[1,274],116:275},o($VA1,[2,136]),o($VA1,[2,137]),o($VA1,$VK1,{111:45,118:276,7:$V0,10:$VB1,14:$VC1}),o($VA1,[2,144],{10:$VL1,14:$VM1}),{7:$V0,10:$VB1,12:$VN1,14:$VC1,30:$V2,76:125,79:8,80:9,82:49,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,107:$Vg,110:212,111:11,112:281,114:122,116:124,117:279,118:213},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,15:[1,282],19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:116,74:283},{80:131,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,100:[1,284],101:$Ve,102:$Vf,103:218,104:130,107:$Vg},o($Vo,[2,100]),o($VD1,[2,105]),{22:[1,286],77:[1,285]},o($Vs,[2,109]),o($Vs,[2,111],{61:[1,287]}),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:116,74:288},o($VF1,[2,107]),o($Vo,[2,114]),{7:$VW,109:289},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:116,74:290},{22:$VG1,100:[1,291]},{22:[1,293],100:[1,292]},o($VH1,[2,158]),o($VY,[2,172]),o($V_,[2,166]),{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:294,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},o($V_,[2,168]),o($V21,[2,74]),{12:[1,295],22:$V11},{12:[1,296],22:$V11},{12:[1,297],22:$V11},{10:[1,298]},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,123:299},o($V_,[2,189]),o($V31,[2,61]),{22:$V11,61:[1,300]},o($V81,[2,57],{56:$V91}),{15:[1,301],22:$V11},o($Va1,[2,8]),{12:[1,302],22:[1,303]},o($VA1,[2,14]),o($Va1,[2,10]),o($Va1,[2,11]),{12:[1,304]},o($Vc1,[2,55],{54:$Vd1}),o($Ve1,[2,53],{52:$Vf1}),o($Va1,[2,5]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:305,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ},{12:[2,142]},{10:$VJ1,12:$VK1,14:$VC1,118:276},{10:$VJ1,12:$VN1,14:$VC1,30:$V2,76:125,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,107:$Vg,110:256,112:281,114:122,116:124,117:279,118:213},o($Vg1,[2,51],{29:$Vh1}),o($Vi1,[2,49],{48:$Vj1,49:$Vk1}),o($Vl1,[2,46],{43:$Vm1,44:$Vn1,45:$Vo1,46:$Vp1}),o($Vl1,[2,47],{43:$Vm1,44:$Vn1,45:$Vo1,46:$Vp1}),o($Vq1,[2,41],{40:$Vr1,41:$Vs1}),o($Vq1,[2,42],{40:$Vr1,41:$Vs1}),o($Vq1,[2,43],{40:$Vr1,41:$Vs1}),o($Vq1,[2,44],{40:$Vr1,41:$Vs1}),o($Vt1,[2,38],{31:$Vu1,32:$Vv1}),o($Vt1,[2,39],{31:$Vu1,32:$Vv1}),o($Vw1,[2,35],{30:$Vx1,36:$Vy1,37:$Vz1}),o($Vw1,[2,36],{30:$Vx1,36:$Vy1,37:$Vz1}),o($V41,[2,31]),o($V41,[2,32]),o($V41,[2,33]),o($VA1,[2,140]),{12:[2,133]},o($VA1,[2,135]),o($VA1,[2,145],{10:$VL1,14:$VM1}),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,15:[1,306],19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:116,74:307},{12:[1,308],76:125,79:8,80:9,84:$V3,85:$V4,86:$V5,87:$V6,88:$V7,89:$V8,90:$V9,91:$Va,92:$Vb,93:$Vc,94:$Vd,95:23,96:24,97:28,101:$Ve,102:$Vf,107:$Vg,112:309,114:122,116:124},{12:[1,310]},o($VO1,[2,151]),{12:[1,311]},o($VO1,[2,147]),{15:[1,312]},o($Vo,[2,99]),o($VD1,[2,106]),{7:$V0,10:$V1,30:$V2,61:$VE1,82:221,106:313,110:10,111:11},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:116,74:314},o($Vs,[2,112]),o($VH1,[2,118]),o($VH1,[2,120]),o($Vo,[2,115]),o($VI1,[2,156]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,21:138,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,83:316,98:$VX,100:[1,315]},o($V_,[2,167]),{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:317,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:318,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:319,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:320,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,11:322,12:[1,321],13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,23:117,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:323},o($Va1,[2,7]),o($Va1,[2,9]),{6:94,7:$VV,8:$Vy,9:$Vz,10:$VA,13:88,19:$VB,21:324,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85},o($V61,[2,21]),o($V61,[2,29]),o($VO1,[2,149]),{15:[1,325]},o($VO1,[2,153]),{12:[1,326]},o($VO1,[2,146]),o($VO1,[2,152]),o($VO1,[2,148]),o($Vs,[2,110]),o($Vs,[2,113]),o($VI1,[2,157]),o($VH1,[2,159]),o($VZ,[2,179],{132:[1,327]}),o($V_,[2,181]),o($V_,[2,182]),{12:[1,328],22:$V11},{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:329,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{12:[1,330],22:$V11},o($V31,[2,59]),o($VA1,[2,15]),o($VO1,[2,150]),o($VO1,[2,154]),{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:331,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},{77:[1,332]},o($V_,[2,184]),{6:94,7:$Vx,8:$Vy,9:$Vz,10:$VA,11:75,13:88,19:$VB,21:84,23:86,24:$VC,25:91,26:112,27:$VD,29:$VE,30:$VF,31:$VG,32:$VH,33:$VI,34:$VJ,35:111,38:110,39:109,42:108,47:107,50:106,51:105,53:101,55:93,57:87,59:85,77:$VK,98:$Vj,120:333,121:65,122:66,123:67,124:68,125:69,126:70,127:$VL,128:$VM,131:$VN,133:$VO,134:$VP,135:$VQ,136:$VR,137:$VS,138:$VT,139:$VU},o($V_,[2,180]),o($V_,[2,183]),o($V_,[2,185])],
defaultActions: {32:[2,1],255:[2,142],274:[2,133]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //var dictionary;
    console.log("Dictionary is declared");
 
declarationsDictionary = {};

addDictionary = function(key, value){
    declarationsDictionary[key] = value;
}

printDictionary = function(){
    console.log("Print dictionary.");
    for(key in declarationsDictionary){
        console.log("Key: " + key + " Value: " + declarationsDictionary.key);
    }
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */                                 
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 8
break;
case 4:return 70
break;
case 5:return 69
break;
case 6:return 67
break;
case 7:return 68
break;
case 8:return 64
break;
case 9:return 65
break;
case 10:return 66
break;
case 11:return 71
break;
case 12:return 72
break;
case 13:return 73
break;
case 14:return 41
break;
case 15:return 40
break;
case 16:return 19
break;
case 17:return 24
break;
case 18:return 18
break;
case 19:return 56
break;
case 20:return 58
break;
case 21:return 45
break;
case 22:return 46
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 77
break;
case 26:return 98
break;
case 27:return 100
break;
case 28:return 22
break;
case 29:return 61
break;
case 30:return 63
break;
case 31:return 10
break;
case 32:return 12
break;
case 33:return 14
break;
case 34:return 15
break;
case 35:return 17
break;
case 36:return 29
break;
case 37:return 34
break;
case 38:return 33
break;
case 39:return 32
break;
case 40:return 31
break;
case 41:return 30
break;
case 42:return 36
break;
case 43:return 37
break;
case 44:return 43
break;
case 45:return 44
break;
case 46:return 52
break;
case 47:return 54
break;
case 48:return 60
break;
case 49:return 138
break;
case 50:return 127
break;
case 51:return 87
break;
case 52:return 137
break;
case 53:return 128
break;
case 54:return 135
break;
case 55:return 92
break;
case 56:return 132
break;
case 57:return 91
break;
case 58:return 136
break;
case 59:return 131
break;
case 60:return 89
break;
case 61:return 90
break;
case 62:return 139
break;
case 63:return 88
break;
case 64:return 93
break;
case 65:return 27
break;
case 66:return 101
break;
case 67:return 133
break;
case 68:return 84
break;
case 69:return 102
break;
case 70:return 94
break;
case 71:return 86
break;
case 72:return 134
break;
case 73:return 7 
break;
case 74:return 9
break;
case 75:return 5
break;
case 76:return 'INVALID'
break;
}
},
rules: [/^(?:[\t\v\n\f\s]+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:"[^"]+")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ansic;
exports.Parser = ansic.Parser;
exports.parse = function () { return ansic.parse.apply(ansic, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}